<?php
/**
 * @file
 * Integerate the site search system with the Apach Solr search service.
 */

/**
 * Store module variables.
 */
function ascs_obj() {
  static $obj = NULL;
  if ($obj == NULL) {
    $obj = new stdClass();

    // Used content types.
    $obj->content_types = array(
      'all',
      'article',
      'product',
      'news',
    );

    // The content type wich is searched.
    $obj->as_content_type = NULL;

    // Additional fields to index in ApacheSolr.
    $obj->fields_to_index = array(
      'product' => array(
        'field_product_image' => array(
          'type' => 'file',
          'index_as' => 'sm',
        ),
      ),
      'article' => array(
        'field_article_image' => array(
          'type' => 'file',
          'index_as' => 'sm',
        ),
      ),
      'news' => array(
        'field_news_image' => array(
          'type' => 'file',
          'index_as' => 'sm',
        ),
      ),
    );
  }
  return $obj;
}

/**
 * Implements hook_menu
 */
function ascs_menu() {
  return array(
    'admin/settings/apachesolr/ascs' => array(
      'title' => 'ASCS content settings',
      'description' => 'It defines fields to be indexed.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ascs_admin_content_settings_page'),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('Administer search (ASCS)') ,
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function ascs_perm() {
  return array('Administer search (ASCS)');
}

/**
 * It defines the admin settings form.
 */
function ascs_admin_content_settings_form() {
  $form = array(
    '#tree' => TRUE,
  );

  // It gets the cck structure data.
  $types = node_get_types('types');
  $fields_info = _content_type_info();

  // It remaps data.
  foreach($fields_info['fields'] as $field_name => $field) {
    $type = $types[$field['type_name']];
    if (!property_exists($type, 'fields')) {
      $type->fields = array();
    }
    $type->fields[$field_name] = $field;
  }

  // It retrieves settings.
  $settings = variable_get('ascs_content_type_list', array());

  //It builds the form.
  foreach($types as $type_name => $type) {
    $field_set = array(
      '#title' => $type->name,
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    if (!property_exists($type, 'fields')) {
      continue;
    }
    foreach($type->fields as $field_key => $field) {
      $value = 0;
      if (array_key_exists($type_name, $settings) && array_key_exists($field_key, $settings[$type_name])) {
        $value = $settings[$type_name][$field_key];
      }
      $form_item = array(
        '#title' => $field_key,
        '#type' => 'checkbox',
        '#value' => $value,
      );
      $field_set[$field_key] = $form_item;
    }
    $form[$type_name] = $field_set;
    $form['buttons'] = array(
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Save configuration'),
      ),
    );
  }
  return $form;
}
/**
 * It implements the submition function of ascs_admin_content_settings_form form.
 */
function ascs_admin_content_settings_form_submit($form, &$form_state) {
  variable_set('ascs_content_type_list', $form_state['values']);
}
/**
 * Implements hook_theme().
 */
function ascs_theme() {

  // Defining.
  $theme_code_names = array(
    'ascs_result_left',
    'ascs_result_main_all',
    'ascs_result_main_article',
    'ascs_result_main_news',
    'ascs_result_main_product',
  );

  // Proccessing.
  $themes = array();
  foreach ($theme_code_names as $code_name) {
    $themes[$code_name] = array(
      'arguments' => array(
        'data' => NULL,
      ),
      'template' => 'theme/' . $code_name,
    );
  }
  return $themes;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ascs_ctools_plugin_directory($module, $plugin) {
  if (($module == 'ctools') || ($module == 'panels')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Wrapped apache search function to add aditional logic.
 */
function ascs_execute($search, $content_type, $rows = 10) {

  // Main purpose of this function is a searching by exact content types.
  if ($content_type == NULL) {
    return NULL;
  }

  // Try to exclude code warnings.
  $search_initial = array(
    'keys' => '',
    'filters' => '',
    'sort' => '',
    'path' => '',
    'page' => 0,
  );
  $search = array_merge($search_initial, $search);

  // Define what the content type we try to process.
  $obj = ascs_obj();
  $obj->as_content_type = $content_type;
  $obj->as_params = array(
    'rows' => $rows,
  );
  $result = NULL;

  // Try to proccess a search.
  try {
    $result = apachesolr_search_execute($search['keys'], $search['filters'], $search['sort'], $search['path'], $search['page']);
  }
  catch (Exception $e) {
    watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
    apachesolr_failure(t('Solr search'), $search['keys']);
  }

  // Get a current query to get the total count.
  $num_found = 0;
  if (apachesolr_has_searched() && ($response = apachesolr_static_response_cache())) {
    $num_found = $response->response->numFound;
  }

  // Switch of the Apache Solr semaphore.
  $obj->as_content_type = NULL;
  $obj->as_params = array();
  return array(
    'result' => $result,
    'num_found' => $num_found,
  );
}

/**
 * Implements hook_apachesolr_modify_query().
 */
function ascs_apachesolr_modify_query(&$query, &$params, $caller) {
  $obj = ascs_obj();
  $params['rows'] = $obj->as_params['rows'];

  // Inject CCK parameters.
  if ($obj->as_content_type != NULL) {

    // Select needed fields.
    if (array_key_exists($obj->as_content_type, $obj->fields_to_index)) {
      $fields = $obj->fields_to_index[$obj->as_content_type];
      if (is_array($fields)) {
        $indexes = array();
        foreach ($fields as $field_name => $field) {
          $indexes[] = $field['index_as'] . '_' . $field_name;
        }
        $fl = join(',', $indexes);
      }
    }

    // Set fields.
    $params['fl'] .= ',' . $fl;

    // Add tags to the product content type.
    if ($obj->as_content_type == 'product') {
      $params['fl'] .= ',vid,ts_vid_1_names';
    }

    // Add teaser to article, news content types.
    if (in_array($obj->as_content_type, array('article', 'news'))) {
      $params['fl'] .= ',teaser';
    }

    // Add filter. Filter by content type.
    $query->add_filter('type', $obj->as_content_type);
  }
}

/**
 * Implements hook_apachesolr_update_index().
 */
function ascs_apachesolr_update_index(&$document, $node) {

  // Get fields to index.
  $obj = ascs_obj();
  $content_types_names = array_keys($obj->fields_to_index);

  // If we are not needed to index this node(this content type).
  if (!in_array($node->type, $content_types_names)) {
    return;
  }

  // Loop fields of the content type to index.
  foreach ($obj->fields_to_index[$node->type] as $field_name => $field) {
    $node_as_array = (array) $node;

    // Try to omit unexisted fields.
    if (!key_exists($field_name, $node_as_array)) {
      continue;
    }
    $value = $node_as_array[$field_name];

    // Try to index.
    if ($field['type'] == 'file') {

      // Index a single value.
      if (count($value) == 1 and (is_array($value[0]) and array_key_exists('fid', $value[0]))) {
        $index = $field['index_as'] . '_' . $field_name;
        $document->setMultiValue($index, $value[0]['filepath']);
      }

      // Index an array.
      if (count($value) > 1) {
        for ($i = 0; $i < count($value); $i++) {
          if (array_key_exists('fid', $value[$i])) {
            $index = $field['index_as'] . '_' . $field_name . '_' . $i;
            $document->setMultiValue($index, $value[$i]['filepath']);
          }
        }
      }
    }
  }
}
